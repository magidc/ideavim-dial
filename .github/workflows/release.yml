name: Gradle Build & Auto Release

on:
  push:
    branches:
      - release

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write

    steps:
      - name: Checkout with full history so we can tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setting up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Extract Gradle version
        id: get_version
        run: |
          VERSION=$(./gradlew properties -q | grep "^pluginVersion:" | awk '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Git tag  (only if not existing)
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skipping."
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag "$TAG"
            git push origin "$TAG"
          fi

      - name: Build with Gradle
        run: ./gradlew buildPlugin

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: v${{ steps.get_version.outputs.version }}
          files: build/distributions/*.zip
          body: |
            Automated release for version ${{ steps.get_version.outputs.version }}.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

